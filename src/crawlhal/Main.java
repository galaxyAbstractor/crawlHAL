/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Main.java
 *
 * Created on Dec 14, 2010, 7:50:40 PM
 */

package crawlhal;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JToggleButton;

/**
 *
 * @author vigge
 */
public class Main extends javax.swing.JFrame {

    private static LinkedList<URL> pending = new LinkedList<URL>();
    private static LinkedList<String> output = new LinkedList<String>();
    private static LinkedList<URL> crawled = new LinkedList<URL>();

    public static boolean toggled = false;

    // Some stats for debugging purpose
    public static int linksAddedToPending = 0;
    public static int linksFound = 0;
    public static int linksTotal = 0;
    
    static {
       System.setProperty("swing.defaultlaf", "org.pushingpixels.substance.api.skin.SubstanceGeminiLookAndFeel");
    }
    /** Creates new form Main */
    public Main() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jXStatusBar1 = new org.jdesktop.swingx.JXStatusBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jLabel1.setText("URL:");
        jToolBar1.add(jLabel1);
        jToolBar1.add(jTextField1);

        jToggleButton1.setText("Crawl");
        jToggleButton1.setFocusable(false);
        jToggleButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton1);

        jScrollPane1.setAlignmentX(0.0F);
        jScrollPane1.setAlignmentY(0.0F);
        jScrollPane1.setAutoscrolls(true);

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jTextArea1.setAutoscrolls(true);
        jTextArea1.setEnabled(false);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("Status");
        jXStatusBar1.add(jLabel2);

        jLabel3.setText("Pending: 0");
        jXStatusBar1.add(jLabel3);

        jLabel4.setText("Crawled: 0");
        jXStatusBar1.add(jLabel4);

        jLabel5.setText("crawling");
        jXStatusBar1.add(jLabel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
            .addComponent(jXStatusBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jXStatusBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-477)/2, (screenSize.height-330)/2, 477, 330);
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // Fetch the button from the event
        JToggleButton btn = (JToggleButton) evt.getSource();

        // Create a new crawler
        Crawler c = new Crawler();

        // If the button is selected we should run, if the button get's untoggled we should cancel
        if(btn.isSelected()){
            try {
                // If the pending list is empty we should add our starting point
                if(pending.size() == 0)
                    pending.add(new URL(jTextField1.getText()));
            } catch (MalformedURLException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            toggled = true;
            c.execute();
        } else {
            c.cancel(true);
            updateStatus();
            toggled = false;
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        JFrame.setDefaultLookAndFeelDecorated(true);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private static javax.swing.JLabel jLabel3;
    private static javax.swing.JLabel jLabel4;
    private static javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToolBar jToolBar1;
    private org.jdesktop.swingx.JXStatusBar jXStatusBar1;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @return LinkedList<URL> a linked list with the URLs to crawl
     */
    public static LinkedList<URL> getPending(){
        return pending;
    }

    /**
     * add an URL to the pending list
     * @param URL
     */
    public static void addToPending(URL URL){
        
        if(!pending.contains(URL) && !crawled.contains(URL)) {
            pending.addLast(URL);
            linksAddedToPending++;
        } else {
            linksFound++;
        }
    }

    /**
     * Remove first object
     */
    public static void removeFromPending(){
        pending.remove(0);
    }

    /**
     * Adds an URL to the crawled list
     * @param URL a URL to add
     */
    public static void addToCrawled(URL URL){
        crawled.addLast(URL);
    }

    /**
     * Update the output.
     * Truncates the output to 9 lines, currently
     * @param line a line to add
     */
    public static void appendToOutputArea(String line) {
        if(output.size() > 9){
            output.removeFirst();
        }
        output.addLast(line);

        String listOutput = "";
        for(int i = 0; i < output.size();i++){
            listOutput = listOutput +"\n"+ output.get(i);
        }
        jTextArea1.setText(listOutput);
    }

    /**
     * Update the status of the lists
     */
    public static void updateStatus(){
        jLabel3.setText("Pending: "+pending.size());
        jLabel4.setText("Crawled: "+crawled.size());
    }

    /**
     * Let the user know the current URL we are crawling
     * @param current
     */
    public static void setCurrentlyCrawling(String current){
        jLabel5.setText(current);
    }
}
